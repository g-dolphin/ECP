countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
View(countryconc)
k=1
### Print progress
print(paste("working on year",yrs[k]))
### Step 1: Import data
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
dim(zqm)
dim(tqm)
View(sequential_ind)
rm(cg)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Datamatch
ecpmwd<-file.path(wd,"2_match")
################################################################################
## Packages, Filepaths & Data ##################################################
# Packages
library(dplyr)
library(tidyr)
#library(stringr)
#library(readxl)
dir.create(file.path(ecpmwd, "tmpdir"))
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# Main function
source(file.path(ecpmwd,"matching_function.R"))
# ECP and concordance data
ecp<-read.csv(file.path(fpe,"ecp_sector_CO2.csv"))
load(file.path(ecpmwd,"ipcc_conc","ipcc_conc.RData"))
# define years to run the process for
yrs<-seq(1990,2022)
#### Concordance between country names #########################################
# align country names
load(file.path(wd,"1_import","gloria","tmpdir",paste0("gloria_",yrs[1],".RData")))
rm(demand_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm)
region_ind$Region_names
unique(ecp$jurisdiction)
countryconc<-as.data.frame(matrix(ncol=2,nrow=length(unique(ecp$jurisdiction))))
colnames(countryconc)<-c("c_ecp","c_gloria")
countryconc$c_ecp<-unique(ecp$jurisdiction)
# to start with
for(i in 1:nrow(countryconc)){
#
cg<-region_ind$Region_names[substr(region_ind$Region_names,1,5)==substr(countryconc$c_ecp[i],1,5)]
#
if(length(cg)==0){
countryconc$c_gloria[i]<-NA
} else{
countryconc$c_gloria[i]<-cg
}
#
}
rm(cg)
# then we fill the gaps manually
countryconc$c_gloria[countryconc$c_ecp=="Andorra"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Antigua and Barbuda"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Austria"]<-"Austria"
countryconc$c_gloria[countryconc$c_ecp=="Barbados"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Cabo Verde"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Comoros"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Dem. Rep."]<-"DR Congo"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Rep."]<-"Rep Congo"
countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
rm(region_ind)
k=1
### Print progress
print(paste("working on year",yrs[k]))
### Step 1: Import data
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
dim(tqm)
View(satellites_ind)
colnames(tqm)<-sequential_ind$Sequential_regionSector_labels
sequential_ind$Sequential_regionSector_labels[19680]
sequential_ind$Sequential_regionSector_labels[19681]
View(satellites_ind)
View(sequential_ind)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gloriawd<-file.path(wd,"1_import","gloria")
dir.create(file.path(gloriawd, "tmpdir"))
timestep<-"1990"
qcode<-"20230310"
mcode<-"20230314"
library(dplyr)
library(data.table)
library(Rfast)
library(readxl)
### specify here the filepath where the data is located
fpe<-file.path("C:", "Users", "jomerkle",
"OneDrive - Norwegian University of Life Sciences",
"data",
"GLORIA",
"057",
timestep)
39360/(2*120)
sec<-seq(1:39360) # sequence of numbers (for columns)
ser<-seq(1:39360) # sequence of numbers (for rows)
ones<-rep(1,times=120)
zeros<-rep(0,times=120)
oz<-c(ones,zeros)
full<-rep(oz,times=164)
sec[full==0]<-NA
ser[full==1]<-NA
cselector<-sec[!is.na(sec)] # removes NA values (from columns sequence)
rselector<-ser[!is.na(ser)] # removes NA values (from rows sequence)
rm(full,ones,oz,ser,sec,zeros) # remove objects no longer needed
# satellites for transaction data (reads the satellite data with fread)
tq<-data.table::fread(file = file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_TQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F,
select = cselector)
tqm<-as.matrix(tq)
yq<-read.csv(file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_YQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F)
yqm<-as.matrix(yq)
rm(tq,yq)
# import index data
sector_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sectors")
region_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Regions")
satellites_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Satellites")
demand_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Value added and final demand")
sequential_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sequential region-sector labels")
View(sequential_ind)
cselector
# shorten sequential_ind to reflect the non-product version
all_c_s<-sequential_ind$Sequential_regionSector_labels
short_c_s<-all_c_s[cselector]
all_c_s
short_c_s
sequential_ind$Sequential_regionSector_labels<-NA
View(sequential_ind)
sequential_ind<-sequential_ind[1:length(short_c_s),]
View(sequential_ind)
sequential_ind$Sequential_regionSector_labels<-short_c_s
View(sequential_ind)
### 2 Filter as required #######################################################
dim(tqm)
dim(yqm)
# we only want co2 excl short cycle emissions
rindx<-which(grepl("co2_excl_short_cycle",satellites_ind$Sat_indicator) & satellites_ind$Sat_unit=="kilotonnes")
tqm<-tqm[rindx,]
yqm<-yqm[rindx,]
satellites_ind<-satellites_ind[rindx,]
rm(rindx)
### 3 Save in tmp dir and clean up #############################################
save(demand_ind,region_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm,
file=file.path(gloriawd,"tmpdir",paste0("gloria_",timestep,".Rdata")))
rm(list=ls()[! ls() %in% c("wd","gloriawd")])
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gloriawd<-file.path(wd,"1_import","gloria")
source(file.path(gloriawd,"run_imports.R"))
pl<-"curr_p"
ecpwd<-file.path(wd,"1_import","ecp")
source(file.path(ecpwd,"import_ecp.R"))
### Datamatch
ecpmwd<-file.path(wd,"2_match")
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gloriawd<-file.path(wd,"1_import","gloria")
dir.create(file.path(gloriawd, "tmpdir"))
timestep<-"1990"
qcode<-"20230310"
mcode<-"20230314"
### 1 Directories & packages ###################################################
library(dplyr)
library(data.table)
library(Rfast)
library(readxl)
### specify here the filepath where the data is located
fpe<-file.path("C:", "Users", "jomerkle",
"OneDrive - Norwegian University of Life Sciences",
"data",
"GLORIA",
"057",
timestep)
## notes:
# economic values in k USD basic price
# we have 120 sectors. Industries, products, industries, products.
# We delete the product part, as we do not need it.
# we have 164 countries, and 120 sectors
# we only need markup001 (basic prices)
### 1 Import Satellite data ####################################################
# this just to create a vector of index numbers for those rows and columns we want to keep
# we want to keep only MRIO data, so remove the supply matrices within
# fread is a faster reader than read.csv
39360/(2*120)
sec<-seq(1:39360) # sequence of numbers (for columns)
ser<-seq(1:39360) # sequence of numbers (for rows)
ones<-rep(1,times=120)
zeros<-rep(0,times=120)
oz<-c(ones,zeros)
full<-rep(oz,times=164)
sec[full==0]<-NA
ser[full==1]<-NA
cselector<-sec[!is.na(sec)] # removes NA values (from columns sequence)
rselector<-ser[!is.na(ser)] # removes NA values (from rows sequence)
rm(full,ones,oz,ser,sec,zeros) # remove objects no longer needed
# satellites for transaction data (reads the satellite data with fread)
tq<-data.table::fread(file = file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_TQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F,
select = cselector)
tqm<-as.matrix(tq)
yq<-read.csv(file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_YQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F)
yqm<-as.matrix(yq)
rm(tq,yq)
# import index data
sector_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sectors")
region_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Regions")
satellites_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Satellites")
demand_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Value added and final demand")
sequential_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sequential region-sector labels")
# shorten sequential_ind to reflect the non-product version
all_c_s<-sequential_ind$Sequential_regionSector_labels
short_c_s<-all_c_s[cselector]
sequential_ind$Sequential_regionSector_labels<-NA
sequential_ind<-sequential_ind[1:length(short_c_s),]
sequential_ind$Sequential_regionSector_labels<-short_c_s
View(sequential_ind)
# create full countrylabel and full sectorlabel vectors
sequential_ind['fcq']<-NA
rep(sector_ind$Sector_names,times=nrow(region_ind))
# create full countrylabel and full sectorlabel vectors
sequential_ind['fsq']<-rep(sector_ind$Sector_names,times=nrow(region_ind))
View(sequential_ind)
View(region_ind)
cq<-region_ind$Region_names
fcql<-list()
fcql<-list()
for(i in 1:length(cq)){
fcql[[i]]<-rep(cq[i],times=nrow(sector_ind))
}
fcq<-do.call("unlist",fcql)
fcq<-do.call("cbind",fcql)
View(fcq)
fcq<-do.call("c",fcql)
fcq
sequential_ind['fcq']<-do.call("c",fcql)
View(sequential_ind)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gloriawd<-file.path(wd,"1_import","gloria")
timestep<-"1990"
qcode<-"20230310"
mcode<-"20230314"
### 1 Directories & packages ###################################################
library(dplyr)
library(data.table)
library(Rfast)
library(readxl)
### specify here the filepath where the data is located
fpe<-file.path("C:", "Users", "jomerkle",
"OneDrive - Norwegian University of Life Sciences",
"data",
"GLORIA",
"057",
timestep)
## notes:
# economic values in k USD basic price
# we have 120 sectors. Industries, products, industries, products.
# We delete the product part, as we do not need it.
# we have 164 countries, and 120 sectors
# we only need markup001 (basic prices)
### 1 Import Satellite data ####################################################
# this just to create a vector of index numbers for those rows and columns we want to keep
# we want to keep only MRIO data, so remove the supply matrices within
# fread is a faster reader than read.csv
39360/(2*120)
sec<-seq(1:39360) # sequence of numbers (for columns)
ser<-seq(1:39360) # sequence of numbers (for rows)
ones<-rep(1,times=120)
zeros<-rep(0,times=120)
oz<-c(ones,zeros)
full<-rep(oz,times=164)
sec[full==0]<-NA
ser[full==1]<-NA
cselector<-sec[!is.na(sec)] # removes NA values (from columns sequence)
rselector<-ser[!is.na(ser)] # removes NA values (from rows sequence)
rm(full,ones,oz,ser,sec,zeros) # remove objects no longer needed
# satellites for transaction data (reads the satellite data with fread)
tq<-data.table::fread(file = file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_TQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F,
select = cselector)
tqm<-as.matrix(tq)
yq<-read.csv(file.path(fpe,
paste0(qcode,
"_120secMother_AllCountries_002_YQ-Results_",
timestep,
"_057_Markup001(full).csv")
),
header = F)
yqm<-as.matrix(yq)
rm(tq,yq)
# import index data
sector_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sectors")
region_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Regions")
satellites_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Satellites")
demand_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Value added and final demand")
sequential_ind <- read_excel(file.path(fpe,"..","GLORIA_ReadMe_057.xlsx"),sheet = "Sequential region-sector labels")
# shorten sequential_ind to reflect the non-product version
all_c_s<-sequential_ind$Sequential_regionSector_labels
short_c_s<-all_c_s[cselector]
sequential_ind$Sequential_regionSector_labels<-NA
sequential_ind<-sequential_ind[1:length(short_c_s),]
sequential_ind$Sequential_regionSector_labels<-short_c_s
# create full countrylabel and full sectorlabel vectors
cq<-region_ind$Region_names
fcql<-list()
for(i in 1:length(cq)){
fcql[[i]]<-rep(cq[i],times=nrow(sector_ind))
}
sequential_ind['fcq']<-do.call("c",fcql)
sequential_ind['fsq']<-rep(sector_ind$Sector_names,times=nrow(region_ind))
rm(cq,fcql)
View(sequential_ind)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
pl<-"curr_p"
ecpwd<-file.path(wd,"1_import","ecp")
library("dplyr")
library("tidyr")
dir.create(file.path(ecpwd, "tmpdir"))
## specify source filepath here
if(pl=="curr_p"){
fpe<-file.path(here::here(),"_dataset","ecp","ipcc","ecp_sectors","currentPrices","FlexXRate")
} else if(pl=="cons_p"){
fpe<-file.path(here::here(),"_dataset","ecp","ipcc","ecp_sectors","constantPrices","FixedXRate")
}
file.copy(from = file.path(fpe,"ecp_sector_CO2.csv"),
to = file.path(ecpwd,"tmpdir"))
## clean up (remove files)
rm(list=ls()[! ls() %in% c("wd","pl")])
### Datamatch
ecpmwd<-file.path(wd,"2_match")
# Packages
library(dplyr)
library(tidyr)
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_sector_CO2.csv"))
View(ecp)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
pl<-"curr_p"
ecpwd<-file.path(wd,"1_import","ecp")
library("dplyr")
library("tidyr")
dir.create(file.path(ecpwd, "tmpdir"))
## specify source filepath here
if(pl=="curr_p"){
fpe<-file.path(here::here(),"_dataset","ecp","ipcc","ecp_sectors","currentPrices","FlexXRate")
} else if(pl=="cons_p"){
fpe<-file.path(here::here(),"_dataset","ecp","ipcc","ecp_sectors","constantPrices","FixedXRate")
}
file.copy(from = file.path(fpe,"ecp_sector_CO2.csv"),
to = file.path(ecpwd,"tmpdir"))
## clean up (remove files)
rm(list=ls()[! ls() %in% c("wd","pl")])
### Datamatch
ecpmwd<-file.path(wd,"2_match")
# Packages
library(dplyr)
library(tidyr)
#library(stringr)
#library(readxl)
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_sector_CO2.csv"))
View(ecp)
