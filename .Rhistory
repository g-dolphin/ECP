#library(readxl)
dir.create(file.path(ecpmwd, "tmpdir"))
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# Main function
source(file.path(ecpmwd,"matching_function.R"))
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_sector_CO2.csv"))
if(pl=="cons_p"){
ecp<-ecp %>% rename(ecp_all_usd = ecp_all_usd_k)
} else{}
load(file.path(ecpmwd,"ipcc_conc",paste0("ipcc_conc_",gversion,".RData")))
# define years to run the process for
yrs<-seq(1990,2022)
################################################################################
#### Concordance between country names #########################################
# align country names
load(file.path(wd,"1_import","gloria","tmpdir",paste0("gloria_",yrs[1],".RData")))
rm(demand_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm)
region_ind$Region_names
unique(ecp$jurisdiction)
countryconc<-as.data.frame(matrix(ncol=2,nrow=length(unique(ecp$jurisdiction))))
colnames(countryconc)<-c("c_ecp","c_gloria")
countryconc$c_ecp<-unique(ecp$jurisdiction)
# to start with
for(i in 1:nrow(countryconc)){
#
cg<-region_ind$Region_names[substr(region_ind$Region_names,1,5)==substr(countryconc$c_ecp[i],1,5)]
#
if(length(cg)==0){
countryconc$c_gloria[i]<-NA
} else{
countryconc$c_gloria[i]<-cg
}
#
}
rm(cg)
# then we fill the gaps manually
countryconc$c_gloria[countryconc$c_ecp=="Andorra"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Antigua and Barbuda"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Austria"]<-"Austria"
countryconc$c_gloria[countryconc$c_ecp=="Barbados"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Cabo Verde"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Comoros"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Dem. Rep."]<-"DR Congo"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Rep."]<-"Rep Congo"
countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
countryconc<-rbind(countryconc,c("Yemen, Rep.","DR Yemen (Aden)"))
rm(region_ind)
yrs
# for each year
#
for(k in 30:length(yrs)){
### Print progress
print(paste("working on year",yrs[k]))
### Step 1: Import data
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
### Step 2: Run for sectoral satellites
# add row into data (i.e., rows corresponding to author-created indicators are added to the Satellite account matrix)
print("industrial sectors")
nr<-nrow(tqm)+1
zq<-rbind(tqm,NA)
fcq<-sequential_ind$fcq
fsq<-sequential_ind$fsq
# fill in for each column
for(r in 1:ncol(zq)){
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
# If we have ecp data for the country, we fill in
zq[nr,r]<-calculate_ewcp(yr = yrs[k],
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc],
sattype = sattype,
ctry = tmpc,
sect = tmps,
ecp_data = ecp,
gloria_q_data = zq,
concordance = conclist[[tmps]],
type = "z")
}
### Step 3: Run for demand satellites
# add row into data
print("demand sectors")
nr<-nrow(yqm)+1
yq<-rbind(yqm,NA)
fcq<-sequentiald_ind$fcqd
fsq<-sequentiald_ind$demandind
# fill in for each column
for(r in 1:ncol(yq)){
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
# fill in
yq[nr,r]<-calculate_ewcp(yr = yrs[k],
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc],
sattype = sattype,
ctry = tmpc,
sect = tmps,
ecp_data = ecp,
gloria_q_data = yq,
concordance = conclist[['Other services']], # we choose a non-modified concordance here
type = "y")
}
### Step 4: Save data and clean up
dir.create(file.path(resultfp, yrs[k]))
save(yq,zq,demand_ind,region_ind,satellites_ind,sector_ind,sequential_ind,sequentiald_ind,
file = file.path(resultfp,yrs[k],"ecp_gloria.RData"))
rm(tqm,yq,yqm,zq)
}
## clean up
rm(list=ls()[! ls() %in% c("wd","pl","sattype","ecpmwd")])
### Reformat and Save
yrs<-seq(1990,2022)
zql<-list()
yql<-list()
for(i in 1:length(yrs)){
## 1. Fetch data
load(file.path(ecpmwd,"tmpdir",yrs[i],"ecp_gloria.RData"))
## 2. Get industry level data
zqdf<-as.data.frame(matrix(nrow=nrow(sequential_ind),ncol=6))
colnames(zqdf)<-c("year","country_sector","country","sector","ecp","CO2")
zqdf$year<-yrs[i]
zqdf$country_sector<-sequential_ind$Sequential_regionSector_labels
zqdf$country<-sequential_ind$fcq
zqdf$sector<-sequential_ind$fsq
# ecp is always in the bottom row
zqdf$ecp<-zq[nrow(zq),]
# total emissions row is given by satellites_ind
zqdf$CO2<-zq[which(grepl(sattype,satellites_ind$Sat_head_indicator) & grepl("total",satellites_ind$Sat_indicator)),]
# move into list element
zql[[i]]<-zqdf
rm(zqdf)
## 3. Get industry level data
yqdf<-as.data.frame(matrix(nrow=nrow(sequentiald_ind),ncol=6))
colnames(yqdf)<-c("year","country_sector","country","sector","ecp","CO2")
yqdf$year<-yrs[i]
yqdf$country_sector<-sequentiald_ind$Sequential_finalDemand_labels
yqdf$country<-sequentiald_ind$fcqd
yqdf$sector<-sequentiald_ind$demandind
# ecp is always in the bottom row
yqdf$ecp<-yq[nrow(yq),]
# total emissions row is given by satellites_ind
yqdf$CO2<-yq[which(grepl(sattype,satellites_ind$Sat_head_indicator) & grepl("total",satellites_ind$Sat_indicator)),]
# move into list element
yql[[i]]<-yqdf
rm(yqdf)
}
zqd<-do.call("rbind",zql)
yqd<-do.call("rbind",yql)
View(yqd)
View(zqd)
if(pl=="curr_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_finaldem_CO2.csv"))
} else if (pl=="cons_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_finaldem_CO2.csv"))
}
### Import data
gversion<-"059"
if(pl=="curr_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_finaldem_CO2.csv"))
} else if (pl=="cons_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_finaldem_CO2.csv"))
}
### clean up
unlink(file.path(wd,"1_import","ecp","tmpdir"),recursive = T)
unlink(file.path(wd,"1_import","gloria","tmpdir"),recursive = T)
unlink(file.path(wd,"2_match","tmpdir"),recursive = T)
rm(list=ls())
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gversion<-"059"
gloriawd<-file.path(wd,"1_import","gloria")
if(gversion=="059"){
source(file.path(gloriawd,"run_imports_v59.R"))
} else if(gversion=="057"){
source(file.path(gloriawd,"run_imports_v57.R"))
}
pl<-"cons_p"
ecpwd<-file.path(wd,"1_import","ecp")
source(file.path(ecpwd,"import_ecp.R"))
### Datamatch
ecpmwd<-file.path(wd,"2_match")
sattype<-"EDGAR"
source(file.path(ecpmwd,"match_gloria_ecp.R"))
### Import data
gversion<-"059"
### Datamatch
ecpmwd<-file.path(wd,"2_match")
sattype<-"EDGAR"
source(file.path(ecpmwd,"match_gloria_ecp.R"))
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gversion<-"059"
pl<-"cons_p"
### Datamatch
ecpmwd<-file.path(wd,"2_match")
sattype<-"EDGAR"
################################################################################
####### Script to match GLORIA 057 with ECP ####################################
################################################################################
################################################################################
## Packages, Filepaths & Data ##################################################
# Packages
library(dplyr)
library(tidyr)
#library(stringr)
#library(readxl)
dir.create(file.path(ecpmwd, "tmpdir"))
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# Main function
source(file.path(ecpmwd,"matching_function.R"))
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_sector_CO2.csv"))
if(pl=="cons_p"){
ecp<-ecp %>% rename(ecp_all_usd = ecp_all_usd_k)
} else{}
load(file.path(ecpmwd,"ipcc_conc",paste0("ipcc_conc_",gversion,".RData")))
# define years to run the process for
yrs<-seq(1990,2022)
################################################################################
#### Concordance between country names #########################################
# align country names
load(file.path(wd,"1_import","gloria","tmpdir",paste0("gloria_",yrs[1],".RData")))
rm(demand_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm)
region_ind$Region_names
unique(ecp$jurisdiction)
countryconc<-as.data.frame(matrix(ncol=2,nrow=length(unique(ecp$jurisdiction))))
colnames(countryconc)<-c("c_ecp","c_gloria")
countryconc$c_ecp<-unique(ecp$jurisdiction)
# to start with
for(i in 1:nrow(countryconc)){
#
cg<-region_ind$Region_names[substr(region_ind$Region_names,1,5)==substr(countryconc$c_ecp[i],1,5)]
#
if(length(cg)==0){
countryconc$c_gloria[i]<-NA
} else{
countryconc$c_gloria[i]<-cg
}
#
}
rm(cg)
# then we fill the gaps manually
countryconc$c_gloria[countryconc$c_ecp=="Andorra"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Antigua and Barbuda"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Austria"]<-"Austria"
countryconc$c_gloria[countryconc$c_ecp=="Barbados"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Cabo Verde"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Comoros"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Dem. Rep."]<-"DR Congo"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Rep."]<-"Rep Congo"
countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
countryconc<-rbind(countryconc,c("Yemen, Rep.","DR Yemen (Aden)"))
rm(region_ind)
################################################################################
## Run process #################################################################
# for each year
#
for(k in 8:length(yrs)){
### Print progress
print(paste("working on year",yrs[k]))
### Step 1: Import data
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
### Step 2: Run for sectoral satellites
# add row into data (i.e., rows corresponding to author-created indicators are added to the Satellite account matrix)
print("industrial sectors")
nr<-nrow(tqm)+1
zq<-rbind(tqm,NA)
fcq<-sequential_ind$fcq
fsq<-sequential_ind$fsq
# fill in for each column
for(r in 1:ncol(zq)){
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
# If we have ecp data for the country, we fill in
zq[nr,r]<-calculate_ewcp(yr = yrs[k],
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc],
sattype = sattype,
ctry = tmpc,
sect = tmps,
ecp_data = ecp,
gloria_q_data = zq,
concordance = conclist[[tmps]],
type = "z")
}
### Step 3: Run for demand satellites
# add row into data
print("demand sectors")
nr<-nrow(yqm)+1
yq<-rbind(yqm,NA)
fcq<-sequentiald_ind$fcqd
fsq<-sequentiald_ind$demandind
# fill in for each column
for(r in 1:ncol(yq)){
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
# fill in
yq[nr,r]<-calculate_ewcp(yr = yrs[k],
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc],
sattype = sattype,
ctry = tmpc,
sect = tmps,
ecp_data = ecp,
gloria_q_data = yq,
concordance = conclist[['Other services']], # we choose a non-modified concordance here
type = "y")
}
### Step 4: Save data and clean up
dir.create(file.path(resultfp, yrs[k]))
save(yq,zq,demand_ind,region_ind,satellites_ind,sector_ind,sequential_ind,sequentiald_ind,
file = file.path(resultfp,yrs[k],"ecp_gloria.RData"))
rm(tqm,yq,yqm,zq)
}
## clean up
rm(list=ls()[! ls() %in% c("wd","pl","sattype","gversion","ecpmwd")])
### Reformat and Save
yrs<-seq(1990,2022)
zql<-list()
yql<-list()
for(i in 1:length(yrs)){
## 1. Fetch data
load(file.path(ecpmwd,"tmpdir",yrs[i],"ecp_gloria.RData"))
## 2. Get industry level data
zqdf<-as.data.frame(matrix(nrow=nrow(sequential_ind),ncol=6))
colnames(zqdf)<-c("year","country_sector","country","sector","ecp","CO2")
zqdf$year<-yrs[i]
zqdf$country_sector<-sequential_ind$Sequential_regionSector_labels
zqdf$country<-sequential_ind$fcq
zqdf$sector<-sequential_ind$fsq
# ecp is always in the bottom row
zqdf$ecp<-zq[nrow(zq),]
# total emissions row is given by satellites_ind
zqdf$CO2<-zq[which(grepl(sattype,satellites_ind$Sat_head_indicator) & grepl("total",satellites_ind$Sat_indicator)),]
# move into list element
zql[[i]]<-zqdf
rm(zqdf)
## 3. Get industry level data
yqdf<-as.data.frame(matrix(nrow=nrow(sequentiald_ind),ncol=6))
colnames(yqdf)<-c("year","country_sector","country","sector","ecp","CO2")
yqdf$year<-yrs[i]
yqdf$country_sector<-sequentiald_ind$Sequential_finalDemand_labels
yqdf$country<-sequentiald_ind$fcqd
yqdf$sector<-sequentiald_ind$demandind
# ecp is always in the bottom row
yqdf$ecp<-yq[nrow(yq),]
# total emissions row is given by satellites_ind
yqdf$CO2<-yq[which(grepl(sattype,satellites_ind$Sat_head_indicator) & grepl("total",satellites_ind$Sat_indicator)),]
# move into list element
yql[[i]]<-yqdf
rm(yqdf)
}
zqd<-do.call("rbind",zql)
yqd<-do.call("rbind",yql)
if(pl=="curr_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","currentPrice","FlexXRate",
"ecp_gloria_finaldem_CO2.csv"))
} else if (pl=="cons_p"){
write.csv(zqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_industry_CO2.csv"))
write.csv(yqd,file.path(here::here(),
"_dataset","ecp","industry","ecp_gloria_sectors",gversion,
"edgar_based","constantPrice","FixedXRate",
"ecp_gloria_finaldem_CO2.csv"))
}
### clean up
unlink(file.path(wd,"1_import","ecp","tmpdir"),recursive = T)
unlink(file.path(wd,"1_import","gloria","tmpdir"),recursive = T)
unlink(file.path(wd,"2_match","tmpdir"),recursive = T)
rm(list=ls())
