caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="National average marginal cost of emitting carbon 2021 [USD]",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="National average marginal cost of emitting carbon 2021 [USD]",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
legend.title = "USD",
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="National average marginal cost of emitting carbon 2021 [USD]",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
world_map['ecp']<-0
for(i in 1:nrow(dfs)){
world_map$ecp[world_map$region==dfs$country[i]]<-dfs$ecp[i]
}
ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="National average marginal cost of emitting carbon 2021 [USD]",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
gg<-ggplot(world_map,aes(fill=ecp, map_id=region)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
ggsave(gg,filename=paste0("ecp_map_",yr,"_",".svg"),
device="svg",
height=5,
width=10,
path=file.path(wd,"3_checks",pl,cbase,"map"))
ggsave(gg,filename=paste0("ecp_map_",yr,".svg"),
device="svg",
height=5,
width=10,
path=file.path(wd,"3_checks",pl,cbase,"map"))
dfs['zero']<-"zero"
world_map['zero']<-"zero"
View(world_map)
world_map$zero[world_map$ecp>0]<-"non-zero"
ggplot(world_map,aes(fill=ecp, map_id=region,pattern=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region,pattern=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_pattern_manual(values = c("none","stripe"))+
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
library(ggpattern)
ggplot(world_map,aes(fill=ecp, map_id=region,pattern=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_pattern_manual(values = c("none","stripe"))+
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
library(ggpattern)
ggplot(world_map,aes(fill=ecp, map_id=region,pattern=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_pattern_manual(values = c("none","stripe"))+
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region, pattern=zero)) +
geom_map_pattern(map=world_map) +
scale_fill_viridis_c() +
scale_pattern_manual(values = c("none","stripe"))+
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_alpha_binned() +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_alpha_manual(values=c(1,0.1)) +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())
ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_alpha_manual(values=c(1,0.1)) +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())+
guides(alpha=FALSE)
ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_alpha_manual(values=c(1,0.1)) +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())+
guides(alpha='none')
gg<-ggplot(world_map,aes(fill=ecp, map_id=region, alpha=zero)) +
geom_map(map=world_map) +
scale_fill_viridis_c() +
scale_alpha_manual(values=c(1,0.1)) +
expand_limits(x = world_map$long, y = world_map$lat) +
coord_map("moll") +
theme_bw() +
labs(title="Average marginal cost of emitting carbon 2021",
fill="USD",
caption="Emissions-weighted carbon prices, Dolphin & Merkle (2024)") +
theme(legend.position=c(0.05,0.8),
axis.text = element_blank(),
axis.title = element_blank())+
guides(alpha='none')
ggsave(gg,filename=paste0("ecp_map_",yr,".svg"),
device="svg",
height=5,
width=10,
path=file.path(wd,"3_checks",pl,cbase,"map"))
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gversion<-"059"
tmpmat=T
gloriawd<-file.path(wd,"1_import","gloria")
if(gversion=="059"){
if(isTRUE(tmpmat)){
source(file.path(gloriawd,"run_imports_v59_mat.R"))
} else {
source(file.path(gloriawd,"run_imports_v59.R"))
}
} else if(gversion=="057"){
source(file.path(gloriawd,"run_imports_v57.R"))
}
pl<-"cons_p"
ecpwd<-file.path(wd,"1_import","ecp")
source(file.path(ecpwd,"import_ecp.R"))
### Datamatch
ecpmwd<-file.path(wd,"2_match")
################################################################################
## Packages, Filepaths & Data ##################################################
# Packages
library(dplyr)
library(tidyr)
#library(stringr)
#library(readxl)
dir.create(file.path(ecpmwd, "tmpdir"))
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# Main function
source(file.path(ecpmwd,"matching_function.R"))
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_ipcc_CO2.csv"))
if(pl=="cons_p"){
ecp<-ecp %>% rename(ecp_all_usd = ecp_all_usd_k)
} else{}
load(file.path(ecpmwd,"ipcc_conc",paste0("ipcc_conc_",gversion,".RData")))
# define years to run the process for
yrs<-seq(1990,2022)
################################################################################
#### Concordance between country names #########################################
# align country names
load(file.path(wd,"1_import","gloria","tmpdir",paste0("gloria_",yrs[1],".RData")))
rm(demand_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm)
region_ind$Region_names
unique(ecp$jurisdiction)
countryconc<-as.data.frame(matrix(ncol=2,nrow=length(unique(ecp$jurisdiction))))
colnames(countryconc)<-c("c_ecp","c_gloria")
countryconc$c_ecp<-unique(ecp$jurisdiction)
# to start with
for(i in 1:nrow(countryconc)){
#
cg<-region_ind$Region_names[substr(region_ind$Region_names,1,5)==substr(countryconc$c_ecp[i],1,5)]
#
if(length(cg)==0){
countryconc$c_gloria[i]<-NA
} else{
countryconc$c_gloria[i]<-cg
}
#
}
rm(cg)
# then we fill the gaps manually
countryconc$c_gloria[countryconc$c_ecp=="Andorra"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Antigua and Barbuda"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Austria"]<-"Austria"
countryconc$c_gloria[countryconc$c_ecp=="Barbados"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Cabo Verde"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Comoros"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Dem. Rep."]<-"DR Congo"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Rep."]<-"Rep Congo"
countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
countryconc<-rbind(countryconc,c("Yemen, Rep.","DR Yemen (Aden)"))
rm(region_ind)
################################################################################
## Run process #################################################################
### prep parallelised loop
l_tqm<-list()
l_yqm<-list()
for(k in 1:length(yrs)){
# 1. import
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
# 2. tmpsave
l_tqm[[k]]<-tqm
l_yqm[[k]]<-yqm
# 3. rm
rm(yqm,tqm,demand_ind,region_ind,satellites_ind,sector_ind,sequential_ind,sequentiald_ind)
}
load(file.path(fpg,paste0("gloria_",yrs[1],".RData")))
rm(tqm,yqm)
### part 1
w=32
yr=yrs[w]
yqm=l_yqm[[w]]
tqm=l_tqm[[w]]
demand_ind=demand_ind
region_ind=region_ind
satellites_ind=satellites_ind
sector_ind=sector_ind
sequential_ind=sequential_ind
sequentiald_ind=sequentiald_ind
### Step 1: Run for sectoral satellites
# add row into data (i.e., rows corresponding to author-created indicators are added to the Satellite account matrix)
print("industrial sectors")
nr<-nrow(tqm)+1
zq<-rbind(tqm,NA,NA)
fcq<-sequential_ind$fcq
fsq<-sequential_ind$fsq
# define which c_s we want. Sweden railway.
which(fcq=="Sweden")
unique(fsq)
# define which c_s we want. Sweden railway.
which(fcq=="Sweden") & which(fsq=="Rail transport")
# define which c_s we want. Sweden railway.
intersect(which(fcq=="Sweden"),which(fsq=="Rail transport"))
# define which c_s we want. Sweden railway.
r<-intersect(which(fcq=="Sweden"),which(fsq=="Rail transport"))
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
yr = yr
indx=r
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc]
sattype = "EDGAR"
ctry = tmpc
sect = tmps
ecp_data = ecp
gloria_q_data = zq
concordance = conclist[[tmps]]
type = "z"
sector_ind = sector_ind
demand_ind = demand_ind
### Step 1: Create calculation dataframe
df<-as.data.frame(matrix(NA,nrow=nrow(concordance),ncol=2))
colnames(df)<-c("Sat_ind","cp")
df$Sat_ind<-concordance$Sat_ind
# the below is to make the function work for both industry satellites z
# and demand satellites y
if(type=="z"){
sectorf<-sequential_ind$Sequential_regionSector_labels[sequential_ind$fcq==ctry & sequential_ind$fsq==sect]
} else if(type=="y"){
sectorf=sequentiald_ind$Sequential_finalDemand_labels[sequentiald_ind$fcqd==ctry & sequentiald_ind$demandind==sect]
}
### Step 2: Extract ecp data
# Two cases
if(length(ecp_jur)==1){ # if there is only country
de<-ecp_data %>% filter(jurisdiction == ecp_jur, year==yr)
de$jurisdiction <- ctry
} else { # if there are several then we need to aggregate
de<- ecp_data %>%
filter (jurisdiction %in% ecp_jur,year==yr) %>%
mutate (ecp_co2 = `CO2`*`ecp_all_usd`) %>%
group_by(ipcc_code) %>%
summarise(`CO2`=sum(`CO2`),`ecp_co2`=sum(ecp_co2)) %>%
mutate(ecp_all_usd = ecp_co2/`CO2`)
de$ecp_all_usd[is.na(de$ecp_all_usd)]<-0
de['jurisdiction']<-ctry
}
### Step 3: Extract gloria satellites data
# sattype rows, countrysector column
if(type=="z"){
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
} else if(type=="y"){
# rename colnames
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
}
# add to df
df['emissions']<-zqs
View(df)
### Step 4: Import concordance between ipcc sectors in ECP and in GLORIA
i_c_p <- concordance %>% pivot_longer(-Sat_ind,names_to="cp_ind",values_to="ident")
### Step 5: Map carbon price data from ECP to GLORIA EDGAR/OECD categories
# this is an aggregation from 76 categories to 73 categories
for(i in 2:nrow(df)){
# extract names of the ECP categories that correspond to GLORIA EDGAR categories
tmpnms1<-vector()
tmpnms2<-vector()
tmpnms3<-vector()
tmpnms1<-i_c_p$cp_ind[i_c_p$ident==1 & i_c_p$Sat_ind==df$Sat_ind[i]]
tmpnms2<-i_c_p$cp_ind[i_c_p$ident==2 & i_c_p$Sat_ind==df$Sat_ind[i]]
tmpnms3<-i_c_p$cp_ind[i_c_p$ident==3 & i_c_p$Sat_ind==df$Sat_ind[i]]
if(length(tmpnms1==1)){ # if there is unique concordance then use that
df$cp[i]<-de$ecp_all_usd[de$ipcc_code==tmpnms1]
} else if (length(tmpnms2==1)){ # if we only have a lower resolution ecp, use that (e.g. 1A1C price for 1A1ci emissions)
df$cp[i]<-de$ecp_all_usd[de$ipcc_code==tmpnms2]
} else if (length(tmpnms3)>0){ # if we only have a higher resolution ecp, then use the emissions-weighted average
tmpvectp<-vector()
# extract the carbon price data for the subcategories
tmpvectc<-vector()
for(j in 1:length(tmpnms3)){
tmpvectp[j]<-de$ecp_all_usd[de$ipcc_code==tmpnms3[j]]
tmpvectc[j]<-de$CO2[de$ipcc_code==tmpnms3[j]]
}
if(sum(tmpvectc)>0){ # if there are any emissions
df$cp[i]<-sum((tmpvectc*tmpvectp)/sum(tmpvectc)) # compute emissions-weighted average
} else {
df$cp[i]<-0 # in case there are no emissions, we assume zero (otherwise division by zero generates NA)
}
} else {
df$cp[i]<-0 # in case of no concordance we assume zero price
}
}
### clean up
unlink(file.path(wd,"1_import","ecp","tmpdir"),recursive = T)
unlink(file.path(wd,"1_import","gloria","tmpdir"),recursive = T)
unlink(file.path(wd,"2_match","tmpdir"),recursive = T)
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
### Import data
gversion<-"059"
tmpmat=T
gloriawd<-file.path(wd,"1_import","gloria")
