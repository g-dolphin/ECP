# add gloria names
sq<-unique(fsq)
adf['gloria_sector_name']<-NA
for(i in 1:nrow(adf)){
if(isTRUE(grepl("_",adf$gloria_sector[i]))){
adf$gloria_sector_name[i]<-"Aggregate (see variable gloria_sector)"
}else{
adf$gloria_sector_name[i]<-sq[as.numeric(adf$gloria_sector[i])]
}
}
### define a useful order of sectors and sector aggregates
sort(unique(adf$gloria_sector))
avlbls<-c("1_2_3_4",
"6_7",
"10","11","12",
"15",
"20",
"24","25","26","27","28","29",
"37","38","39","40",
"41_42_43_44_45",
"46","47",
"48_49",
"50",
"50_51",
"51",
"52_53",
"54","55","56","57","58","59","60","61","62","63","64",
"65_70",
"66",
"66_67_68_70",
"69","70","71","72","73",
"73_74_75_76",
"74",
"74_76",
"75","76","77",
"77_78_79_80_81_82_83_84",
"78_79_80_81_82_83_84",
"85","86","87","88","89","90","91","92","93",
"93_94",
"94","95","96","97","98","98_99","99",
"100",
"102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"
)
# impose this order
adf<-adf %>% mutate(gloria_sector = factor(gloria_sector,levels=avlbls))
# now order the rows according to year, country, and gloria sector
adf<-adf %>% arrange(year,country,gloria_sector) %>% relocate(gloria_sector_name, .after=gloria_sector)
# ca y est
# then save
fpr<-file.path(here::here(),"_dataset","ecp","industry","ecp_gloria_sectors","euets_permits")
write.csv(adf,file.path(fpr,"euetspermits_gloria.csv"),row.names=F)
# tidy up
rm(list = ls())
################################################################################
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
################################################################################
### Import data
# select version
gversion<-"059"
tmpmat=T
gloriawd<-file.path(wd,"1_import","gloria")
if(gversion=="059"){
if(isTRUE(tmpmat)){
source(file.path(gloriawd,"run_imports_v59_mat.R"))
} else {
source(file.path(gloriawd,"run_imports_v59.R"))
}
} else if(gversion=="057"){
source(file.path(gloriawd,"run_imports_v57.R"))
}
# select price level
pl<-"cons_p"
ecpwd<-file.path(wd,"1_import","ecp")
source(file.path(ecpwd,"import_ecp.R"))
ecpmwd<-file.path(wd,"2_match")
# Packages
library(dplyr)
library(tidyr)
dir.create(file.path(ecpmwd, "tmpdir"))
# Define filepaths
fpe<-file.path(wd,"1_import","ecp","tmpdir")
fpg<-file.path(wd,"1_import","gloria","tmpdir")
resultfp<-file.path(ecpmwd,"tmpdir")
# Main function
source(file.path(ecpmwd,"matching_function.R"))
# ECP and sector concordance data
ecp<-read.csv(file.path(fpe,"ecp_ipcc_CO2.csv"))
if(pl=="cons_p"){
ecp<-ecp %>%
select(-c(ecp_ets2_coal_usd_k,ecp_ets2_natgas_usd_k,ecp_ets2_oil_usd_k)) %>%
rename(ecp_all_usd = ecp_all_usd_k,
ecp_ets_usd = ecp_ets_usd_k,
ecp_tax_usd = ecp_tax_usd_k,
ecp_ets_coal_usd = ecp_ets_coal_usd_k,
ecp_tax_coal_usd = ecp_tax_coal_usd_k,
ecp_ets_natgas_usd = ecp_ets_natgas_usd_k,
ecp_tax_natgas_usd = ecp_tax_natgas_usd_k,
ecp_ets_oil_usd = ecp_ets_oil_usd_k,
ecp_tax_oil_usd = ecp_tax_oil_usd_k)
} else if (pl == "curr_p"){
ecp<-ecp %>%
select(-c(ecp_ets2_coal_usd,ecp_ets2_natgas_usd,ecp_ets2_oil_usd))
}
load(file.path(ecpmwd,"ipcc_conc",paste0("ipcc_conc_",gversion,".RData")))
# define years to run the process for
yrs<-seq(1990,2022)
# align country names
load(file.path(wd,"1_import","gloria","tmpdir",paste0("gloria_",yrs[1],".RData")))
rm(demand_ind,satellites_ind,sector_ind,sequential_ind,tqm,yqm)
region_ind$Region_names
unique(ecp$jurisdiction)
countryconc<-as.data.frame(matrix(ncol=2,nrow=length(unique(ecp$jurisdiction))))
colnames(countryconc)<-c("c_ecp","c_gloria")
countryconc$c_ecp<-unique(ecp$jurisdiction)
# to start with
for(i in 1:nrow(countryconc)){
#
cg<-region_ind$Region_names[substr(region_ind$Region_names,1,5)==substr(countryconc$c_ecp[i],1,5)]
#
if(length(cg)==0){
countryconc$c_gloria[i]<-NA
} else{
countryconc$c_gloria[i]<-cg
}
#
}
rm(cg)
# then we fill the gaps manually
countryconc$c_gloria[countryconc$c_ecp=="Andorra"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Antigua and Barbuda"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Austria"]<-"Austria"
countryconc$c_gloria[countryconc$c_ecp=="Barbados"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Cabo Verde"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Comoros"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Dem. Rep."]<-"DR Congo"
countryconc$c_gloria[countryconc$c_ecp=="Congo, Rep."]<-"Rep Congo"
countryconc$c_gloria[countryconc$c_ecp=="Czech Republic"]<-"CSSR/Czech Republic (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Dominica"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Federated States of Micronesia"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Fiji"]<-"Rest of Asia_Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Grenada"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Guyana"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Iran, Islamic Rep."]<-"Iran"
countryconc$c_gloria[countryconc$c_ecp=="Kiribati"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Dem. Rep."]<-"North Korea"
countryconc$c_gloria[countryconc$c_ecp=="Korea, Rep."]<-"South Korea"
countryconc$c_gloria[countryconc$c_ecp=="Kosovo"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Lao PDR"]<-"Laos"
countryconc$c_gloria[countryconc$c_ecp=="Lesotho"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Liechtenstein"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Macao SAR, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Maldives"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Marshall Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Mauritius"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Monaco"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Montenegro"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Nauru"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Nigeria"]<-"Nigeria"
countryconc$c_gloria[countryconc$c_ecp=="North Macedonia"]<-"Macedonia"
countryconc$c_gloria[countryconc$c_ecp=="Palau"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Puerto Rico"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Russian Federation"]<-"USSR/Russian Federation (1990/1991)"
countryconc$c_gloria[countryconc$c_ecp=="Samoa"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="San Marino"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Sao Tome and Principe"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Serbia"]<-"Yugoslavia/Serbia (1991/1992)"
countryconc$c_gloria[countryconc$c_ecp=="Seychelles"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Solomon Islands"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="South Africa"]<-"South Africa"
countryconc$c_gloria[countryconc$c_ecp=="South Sudan"]<-"South Sudan"
countryconc$c_gloria[countryconc$c_ecp=="St. Kitts and Nevis"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Lucia"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="St. Vincent and the Grenadines"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Suriname"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Swaziland"]<-"Rest of Africa"
countryconc$c_gloria[countryconc$c_ecp=="Taiwan, China"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Timor-Leste"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Tonga"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Trinidad and Tobago"]<-"Rest of Americas"
countryconc$c_gloria[countryconc$c_ecp=="Tuvalu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="United Kingdom"]<-"United Kingdom"
countryconc$c_gloria[countryconc$c_ecp=="United States"]<-"United States of America"
countryconc$c_gloria[countryconc$c_ecp=="Vanuatu"]<-"Rest of Asia-Pacific"
countryconc$c_gloria[countryconc$c_ecp=="Vatican City"]<-"Rest of Europe"
countryconc$c_gloria[countryconc$c_ecp=="Vietnam"]<-"Viet Nam"
countryconc$c_gloria[countryconc$c_ecp=="West Bank and Gaza"]<-"Palestine"
countryconc$c_gloria[countryconc$c_ecp=="Western Sahara"]<-"Rest of Africa"
countryconc<-rbind(countryconc,c("Yemen, Rep.","DR Yemen (Aden)"))
rm(region_ind)
################################################################################
### import gloria data
l_tqm<-list()
l_yqm<-list()
for(k in 1:length(yrs)){
# 1. import
load(file.path(fpg,paste0("gloria_",yrs[k],".RData")))
# 2. tmpsave
l_tqm[[k]]<-tqm
l_yqm[[k]]<-yqm
# 3. rm
rm(yqm,tqm,demand_ind,region_ind,satellites_ind,sector_ind,sequential_ind,sequentiald_ind)
}
load(file.path(fpg,paste0("gloria_",yrs[1],".RData")))
rm(tqm,yqm)
## define here
w<-which(yrs==2020)
yr=yrs[w]
yqm=l_yqm[[w]]
tqm=l_tqm[[w]]
demand_ind=demand_ind
region_ind=region_ind
satellites_ind=satellites_ind
sector_ind=sector_ind
sequential_ind=sequential_ind
sequentiald_ind=sequentiald_ind
nr<-nrow(tqm)+1
zq<-rbind(tqm,NA,NA)
fcq<-sequential_ind$fcq
fsq<-sequential_ind$fsq
##
unique(fcq)
unique(fsq)
# define here
r<-intersect(which(fcq=="Australia"),which(fsq=="Raising of sheep and goats"))
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
yr = yr
indx=r
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc]
sattype = "EDGAR"
cptype = "ecp"
etype = "all"
ftype = "all"
ctry = tmpc
sect = tmps
ecp_data = ecp
gloria_q_data = zq
concordance = conclist[[tmps]]
type = "z"
sector_ind = sector_ind
demand_ind = demand_ind
### Step 1: Create calculation dataframe
df<-as.data.frame(matrix(NA,nrow=nrow(concordance),ncol=2))
colnames(df)<-c("Sat_ind","cp")
df$Sat_ind<-concordance$Sat_ind
# the below is to make the function work for both industry satellites z
# and demand satellites y
if(type=="z"){
sectorf<-sequential_ind$Sequential_regionSector_labels[sequential_ind$fcq==ctry & sequential_ind$fsq==sect]
} else if(type=="y"){
sectorf=sequentiald_ind$Sequential_finalDemand_labels[sequentiald_ind$fcqd==ctry & sequentiald_ind$demandind==sect]
}
### Step 2: Extract ecp data
# a) First define price variable
if(cptype == "ecp" & ftype == "all"){
ecp_data['cp']<-ecp_data$ecp_all_usd
} else if (cptype == "ets" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_ets_usd
} else if (cptype == "tax" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_tax_usd
} else if (cptype == "ets" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_ets_coal_usd
} else if (cptype == "ets" & ftype == "natgas"){
ecp_data['cp']<-ecp_data$ecp_ets_natgas_usd
} else if (cptype == "ets" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_ets_oil_usd
} else if (cptype == "tax" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_tax_coal_usd
} else if (cptype == "tax" & ftype == "natgas") {
ecp_data['cp']<-ecp_data$ecp_tax_natgas_usd
} else if (cptype == "tax" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_tax_oil_usd
}
# change NA to zero
ecp_data$cp[is.na(ecp_data$cp)]<-0
# b) Remove non-category prices
if(etype=="1a"){
ecp_data$cp[!startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype == "non1a"){
ecp_data$cp[startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype=="all"){}
# c) Two cases
if(length(ecp_jur)==1){ # if there is only country
de<-ecp_data %>% filter(jurisdiction == ecp_jur, year==yr)
de$jurisdiction <- ctry
} else { # if there are several then we need to aggregate
de<- ecp_data %>%
filter (jurisdiction %in% ecp_jur,year==yr) %>%
mutate (ecp_co2 = `CO2`*`cp`) %>%
group_by(ipcc_code) %>%
summarise(`CO2`=sum(`CO2`),`ecp_co2`=sum(ecp_co2)) %>%
mutate(cp = ecp_co2/`CO2`)
de$cp[is.na(de$cp)]<-0
de['jurisdiction']<-ctry
}
### Step 3: Extract gloria satellites data
# sattype rows, countrysector column
if(type=="z"){
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
} else if(type=="y"){
# rename colnames
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
}
# add to df
df['emissions']<-zqs
View(df)
View(satellites_ind)
unique(fsq)
# define here
r<-intersect(which(fcq=="Australia"),which(fsq=="Rail transport"))
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
yr = yr
indx=r
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc]
sattype = "EDGAR"
cptype = "ecp"
etype = "all"
ftype = "all"
ctry = tmpc
sect = tmps
ecp_data = ecp
gloria_q_data = zq
concordance = conclist[[tmps]]
type = "z"
sector_ind = sector_ind
demand_ind = demand_ind
### Step 1: Create calculation dataframe
df<-as.data.frame(matrix(NA,nrow=nrow(concordance),ncol=2))
colnames(df)<-c("Sat_ind","cp")
df$Sat_ind<-concordance$Sat_ind
# the below is to make the function work for both industry satellites z
# and demand satellites y
if(type=="z"){
sectorf<-sequential_ind$Sequential_regionSector_labels[sequential_ind$fcq==ctry & sequential_ind$fsq==sect]
} else if(type=="y"){
sectorf=sequentiald_ind$Sequential_finalDemand_labels[sequentiald_ind$fcqd==ctry & sequentiald_ind$demandind==sect]
}
### Step 2: Extract ecp data
# a) First define price variable
if(cptype == "ecp" & ftype == "all"){
ecp_data['cp']<-ecp_data$ecp_all_usd
} else if (cptype == "ets" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_ets_usd
} else if (cptype == "tax" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_tax_usd
} else if (cptype == "ets" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_ets_coal_usd
} else if (cptype == "ets" & ftype == "natgas"){
ecp_data['cp']<-ecp_data$ecp_ets_natgas_usd
} else if (cptype == "ets" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_ets_oil_usd
} else if (cptype == "tax" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_tax_coal_usd
} else if (cptype == "tax" & ftype == "natgas") {
ecp_data['cp']<-ecp_data$ecp_tax_natgas_usd
} else if (cptype == "tax" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_tax_oil_usd
}
# change NA to zero
ecp_data$cp[is.na(ecp_data$cp)]<-0
# b) Remove non-category prices
if(etype=="1a"){
ecp_data$cp[!startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype == "non1a"){
ecp_data$cp[startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype=="all"){}
# c) Two cases
if(length(ecp_jur)==1){ # if there is only country
de<-ecp_data %>% filter(jurisdiction == ecp_jur, year==yr)
de$jurisdiction <- ctry
} else { # if there are several then we need to aggregate
de<- ecp_data %>%
filter (jurisdiction %in% ecp_jur,year==yr) %>%
mutate (ecp_co2 = `CO2`*`cp`) %>%
group_by(ipcc_code) %>%
summarise(`CO2`=sum(`CO2`),`ecp_co2`=sum(ecp_co2)) %>%
mutate(cp = ecp_co2/`CO2`)
de$cp[is.na(de$cp)]<-0
de['jurisdiction']<-ctry
}
### Step 3: Extract gloria satellites data
# sattype rows, countrysector column
if(type=="z"){
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
} else if(type=="y"){
# rename colnames
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
}
# add to df
df['emissions']<-zqs
View(df)
View(satellites_ind)
unique(fsq)
# define here
r<-intersect(which(fcq=="Australia"),which(fsq=="Electric power generation, transmission and distribution"))
tmpc<-fcq[r] # the country
tmps<-fsq[r] # the sector
yr = yr
indx=r
ecp_jur = countryconc$c_ecp[countryconc$c_gloria==tmpc]
sattype = "EDGAR"
cptype = "ecp"
etype = "all"
ftype = "all"
ctry = tmpc
sect = tmps
ecp_data = ecp
gloria_q_data = zq
concordance = conclist[[tmps]]
type = "z"
sector_ind = sector_ind
demand_ind = demand_ind
### Step 1: Create calculation dataframe
df<-as.data.frame(matrix(NA,nrow=nrow(concordance),ncol=2))
colnames(df)<-c("Sat_ind","cp")
df$Sat_ind<-concordance$Sat_ind
# the below is to make the function work for both industry satellites z
# and demand satellites y
if(type=="z"){
sectorf<-sequential_ind$Sequential_regionSector_labels[sequential_ind$fcq==ctry & sequential_ind$fsq==sect]
} else if(type=="y"){
sectorf=sequentiald_ind$Sequential_finalDemand_labels[sequentiald_ind$fcqd==ctry & sequentiald_ind$demandind==sect]
}
### Step 2: Extract ecp data
# a) First define price variable
if(cptype == "ecp" & ftype == "all"){
ecp_data['cp']<-ecp_data$ecp_all_usd
} else if (cptype == "ets" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_ets_usd
} else if (cptype == "tax" & ftype == "all") {
ecp_data['cp']<-ecp_data$ecp_tax_usd
} else if (cptype == "ets" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_ets_coal_usd
} else if (cptype == "ets" & ftype == "natgas"){
ecp_data['cp']<-ecp_data$ecp_ets_natgas_usd
} else if (cptype == "ets" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_ets_oil_usd
} else if (cptype == "tax" & ftype == "coal") {
ecp_data['cp']<-ecp_data$ecp_tax_coal_usd
} else if (cptype == "tax" & ftype == "natgas") {
ecp_data['cp']<-ecp_data$ecp_tax_natgas_usd
} else if (cptype == "tax" & ftype == "oil") {
ecp_data['cp']<-ecp_data$ecp_tax_oil_usd
}
# change NA to zero
ecp_data$cp[is.na(ecp_data$cp)]<-0
# b) Remove non-category prices
if(etype=="1a"){
ecp_data$cp[!startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype == "non1a"){
ecp_data$cp[startsWith(ecp_data$ipcc_code,"1A")]<-0
} else if (etype=="all"){}
# c) Two cases
if(length(ecp_jur)==1){ # if there is only country
de<-ecp_data %>% filter(jurisdiction == ecp_jur, year==yr)
de$jurisdiction <- ctry
} else { # if there are several then we need to aggregate
de<- ecp_data %>%
filter (jurisdiction %in% ecp_jur,year==yr) %>%
mutate (ecp_co2 = `CO2`*`cp`) %>%
group_by(ipcc_code) %>%
summarise(`CO2`=sum(`CO2`),`ecp_co2`=sum(ecp_co2)) %>%
mutate(cp = ecp_co2/`CO2`)
de$cp[is.na(de$cp)]<-0
de['jurisdiction']<-ctry
}
### Step 3: Extract gloria satellites data
# sattype rows, countrysector column
if(type=="z"){
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
} else if(type=="y"){
# rename colnames
zqs<-gloria_q_data[which(grepl(sattype,satellites_ind$Sat_head_indicator)),indx]
}
# add to df
df['emissions']<-zqs
View(df)
################################################################################
### Setup
wd<-file.path(here::here(),"_code","compilation","ecp","industry")
setwd(wd)
################################################################################
#### remove tmp dirs
unlink(file.path(wd,"1_import","ecp","tmpdir"),recursive = T)
unlink(file.path(wd,"1_import","gloria","tmpdir"),recursive = T)
unlink(file.path(wd,"2_match","tmpdir"),recursive = T)
library(readr)
euetspermits_gloria <- read_csv("_dataset/ecp/industry/ecp_gloria_sectors/euets_permits/euetspermits_gloria.csv")
View(euetspermits_gloria)
df<-euetspermits_gloria
df['relind']<-(df$verified-df$allocatedFree)/df$verified
View(df)
dfg <- df %>% filter(country=="Germany")
library(dplyr)
dfg <- df %>% filter(country=="Germany")
View(dfg)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Electric power generation, transmission and distribution")
View(dfg)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Civil engineering construction")
View(df)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Cement, lime and plaster products")
View(dfg)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Pulp and paper")
View(dfg)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Basic petrochemical products")
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Electric power generation, transmission and distribution")
View(dfg)
dfg <- df %>% filter(country=="Germany" & gloria_sector_name=="Cement, lime and plaster products")
View(dfg)
